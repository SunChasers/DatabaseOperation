<div class="main_right">
		<b>软件工程(Software Engineering，SE)</b>
<h2> 什么是软件工程 </h2>
<p>　　软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及到程序设计语言，数据库，软件开发工具，系统平台，标准，设计模式等方面。
</p><p>　　在现代社会中，软件应用于多个方面。典型的软件比如有电子邮件，嵌入式系统，人机界面，办公套件，操作系统，编译器，数据库，游戏等。同时，各个行业几乎都有计算机软件的应用，比如工业，农业，银行，航空，政府部门等。这些应用促进了经济和社会的发展，使得人们的工作更加高效，同时提高了生活质量。
</p><p>　　软件工程师是对应用软件创造软件的人们的统称，软件工程师按照所处的领域不同可以分为系统分析员，软件设计师，系统架构师，程序员，测试员等等。人们也常常用程序员来泛指各种软件工程师。
</p>
<div class="editsection" style="float:right;margin-left:5px;">[<a href="/w/index.php?title=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B&amp;action=edit&amp;section=2" title="编辑段落: 软件工程的框架">编辑</a>]</div><a name=".E8.BD.AF.E4.BB.B6.E5.B7.A5.E7.A8.8B.E7.9A.84.E6.A1.86.E6.9E.B6"></a><h2> 软件工程的框架 </h2>
<p>　　软件工程的框架可概括为：目标、过程和原则。
</p><p>　　<b>1、软件工程目标</b>
</p><p>　　生产具有正确性、可用性以及开销合宜的产品。正确性指软件产品达到预期功能的程度。可用性指软件基本结构、实现及文档为用户可用的程度。开销合宜是指软件开发、运行的整个开销满足用户要求的程度。这些目标的实现不论在理论上还是在实践中均存在很多待解决的问题，它们形成了对过程、过程模型及工程方法选取的约束。
</p><p>　　软件工程活动是“生产一个最终满足需求且达到工程目标的软件产品所需要的步骤”。主要包括需求、设计、实现、确认以及支持等活动。需求活动包括问题分析和需求分析。问题分析获取需求定义，又称软件需求规约。需求分析生成功能规约。设计活动一般包括概要设计和详细设计。概要设计建立整个软件体系结构，包括子系统、模块以及相关层次的说明、每一模块接口定义。详细设计产生程序员可用的模块说明，包括每一模块中数据结构说明及加工描述。实现活动把设计结果转换为可执行的程序代码。确认活动贯穿于整个开发过程，实现完成后的确认，保证最终产品满足用户的要求。支持活动包括修改和完善。伴随以上活动，还有管理过程、支持过程、培训过程等。
</p><p>　　<b>2、软件工程过程</b>
</p><p>　　生产一个最终能满足需求且达到工程目标的软件产品所需要的步骤。软件工程过程主要包括开发过程、运作过程、维护过程。它们覆盖了需求、设计、实现、确认以及维护等活动。需求活动包括问题分析和需求分析。问题分析获取需求定义，又称软件需求规约。需求分析生成功能规约。设计活动一般包括概要设计和详细设计。概要设计建立整个软件系统结构，包括子系统、模块以及相关层次的说明、每一模块的接口定义。详细设计产生程序员可用的模块说明，包括每一模块中数据结构说明及加工描述。实现活动把设计结果转换为可执行的程序代码。确认活动贯穿于整个开发过程，实现完成后的确认，保证最终产品满足用户的要求。维护活动包括使用过程中的扩充、修改与完善。伴随以上过程，还有管理过程、支持过程、培训过程等。
</p><p>　　<b>3、软件工程的原则</b>
</p><p>　　软件工程的原则是指围绕工程设计、工程支持以及工程管理在软件开发过程中必须遵循的原则。软件工程的原则有以下四项基本原则：
</p><p>　　<i><b>1）选取适宜开发范型。</b></i>该原则与系统设计有关。在系统设计中，软件需求、硬件需求以及其他因素之间是相互制约、相互影响的，经常需要权衡。因此，必须认识需求定义的易变性，采用适宜的开发范型予以控制，以保证软件产品满足用户的要求。
</p><p>　　<i><b>2）采用合适的设计方法。</b></i>在软件设计中，通常要考虑软件的模块化、抽象与信息隐蔽、局部化、一致性以及适应性等特征。合适的设计方法有助于这些特征的实现，以达到软件工程的目标。
</p><p>　　<i><b>3）提供高质量的工程支持。</b></i>“工欲善其事，必先利其器”。在软件工程中，软件工具与环境对软件过程的支持颇为重要。软件工程<a href="/wiki/%E9%A1%B9%E7%9B%AE" title="项目">项目</a>的质量与开销直接取决于对软件工程所提供的支撑质量和效用。
</p><p>　　<i><b>4）重视开发过程的管理。</b></i>软件工程的管理，直接影响可用资源的有效利用，生产满足目标的软件产品，提高软件组织的<a href="/wiki/%E7%94%9F%E4%BA%A7%E8%83%BD%E5%8A%9B" title="生产能力">生产能力</a>等问题。因此，仅当软件过程得以有效管理时，才能实现有效的软件工程。
</p><p>　　这一软件工程框架告诉我们，软件工程的目标是可用性、正确性和合算性；实施一个软件工程要选取适宜的开发范型，要采用合适的设计方法，要提供高质量的工程支撑，要实行开发过程的<a href="/wiki/%E6%9C%89%E6%95%88%E7%AE%A1%E7%90%86" title="有效管理">有效管理</a>；软件工程活动主要包括需求、设计、实现、确认和支持等活动，每一活动可根据特定的软件工程，采用合适的开发范型、设计方法、支持过程以及过程管理。根据软件工程这一框架，软件工程学科的研究内容主要包括：软件开发范型、软件开发方法、<a href="/wiki/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B" title="软件过程">软件过程</a>、软件工具、软件开发环境、计算机辅助软件工程(CASE) 及软件经济学等。 
</p>
<div class="editsection" style="float:right;margin-left:5px;">[<a href="/w/index.php?title=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B&amp;action=edit&amp;section=3" title="编辑段落: 软件工程的基本原理">编辑</a>]</div><a name=".E8.BD.AF.E4.BB.B6.E5.B7.A5.E7.A8.8B.E7.9A.84.E5.9F.BA.E6.9C.AC.E5.8E.9F.E7.90.86"></a><h2> 软件工程的基本原理 </h2>
<p>　　自从1968年提出“软件工程”这一术语以来，研究软件工程的专家学者们陆续提出了100多条关于软件工程的准则或信条。美国著名的软件工程专家<a href="/wiki/%E5%B7%B4%E5%88%A9%C2%B7%E7%8E%BB%E5%A7%86" title="巴利・玻姆">巴利・玻姆</a>（<a href="/wiki/Barry_Boehm" title="Barry Boehm">Barry Boehm</a>）综合这些专家的意见，并总结了<a href="/wiki/%E7%BE%8E%E5%9B%BD%E5%A4%A9%E5%90%88%E5%85%AC%E5%8F%B8" title="美国天合公司">美国天合公司</a>（TRW）多年的开发软件的经验，于1983年提出了软件工程的七条基本原理。
</p><p>　　玻姆认为，这七条原理是确保软件产品质量和开发效率的原理的最小集合。它们是相互独立的，是缺一不可的最小集合；同时，它们又是相当完备的。
</p><p>　　人们当然不能用数学方法严格证明它们是一个完备的集合，但是可以证明，在此之前已经提出的100多条软件工程准则都可以有这七条原理的任意组合蕴含或派生。下面简要介绍软件工程的七条原理：
</p><p>　　<b>1、用分阶段的生命周期计划严格管理</b>
</p><p>　　这一条是吸取前人的教训而提出来的。<a href="/wiki/%E7%BB%9F%E8%AE%A1" title="统计">统计</a>表明，50%以上的失败项目是由于计划不周而造成的。在软件开发与维护的漫长生命周期中，需要完成许多性质各异的工作。这条原理意味着，应该把<a href="/wiki/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" title="软件生命周期">软件生命周期</a>分成若干阶段，并相应制定出切实可行的计划，然后严格按照计划对软件的开发和维护进行管理。 玻姆认为，在整个软件生命周期中应指定并严格执行6类计划：项目概要计划、<a href="/wiki/%E9%87%8C%E7%A8%8B%E7%A2%91%E8%AE%A1%E5%88%92" title="里程碑计划">里程碑计划</a>、项目控制计划、产品控制计划、验证计划、运行维护计划。
</p><p>　　<b>2、坚持进行阶段评审</b>
</p><p>　　统计结果显示： 大部分错误是在编码之前造成的，大约占63%错误发现的越晚，改正它要付出的代价就越大，要差2到3个数量级。 因此，软件的<a href="/wiki/%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81" title="质量保证">质量保证</a>工作不能等到编码结束之后再进行，应坚持进行严格的阶段评审，以便尽早发现错误。
</p><p>　　<b>3、实行严格的产品控制</b>
</p><p>　　开发人员最痛恨的事情之一就是改动需求。但是实践告诉我们，需求的改动往往是不可避免的。这就要求我们要采用科学的产品控制技术来顺应这种要求。也就是要采用变动控制，又叫基准配置管理。当<a href="/wiki/%E9%9C%80%E6%B1%82%E5%8F%98%E5%8A%A8" title="需求变动">需求变动</a>时，其它各个阶段的文档或代码随之相应变动，以保证软件的一致性。
</p><p>　　<b>4、采纳现代程序设计技术</b>
</p><p>　　从六、七时年代的结构化软件开发技术，到最近的面向对象技术，从第一、第二代语言，到第四代语言，人们已经充分认识到：方法大似气力。采用先进的技术即可以提高软件开发的效率，又可以减少软件维护的成本。
</p><p>　　<b>5、结果应能清楚地审查</b>
</p><p>　　软件是一种看不见、摸不着的逻辑产品。软件开发小组的工作进展情况可见性差，难于评价和管理。为更好地进行管理，应根据软件开发的总目标及完成期限， 尽量明确地规定开发小组的责任和<a href="/wiki/%E4%BA%A7%E5%93%81%E6%A0%87%E5%87%86" title="产品标准">产品标准</a>，从而使所得到的标准能清楚地审查。
</p><p>　　<b>6、开发小组的人员应少而精</b>
</p><p>　　开发人员的素质和数量是影响软件质量和开发效率的重要因素，应该少而精。
　　这一条基于两点原因：高素质开发人员的效率比低素质开发人员的效率要高几倍到几十倍，开发工作中犯的错误也要少的多； 当开发小组为N人时，可能的通讯信道为N(N-1)/2, 可见随着人数N的增大，通讯开销将急剧增大。
</p><p>　　<b>7、承认不断改进软件工程实践的必要性</b>
</p><p>　　遵从上述六条基本原理，就能够较好地实现软件的工程化生产。但是，它们只是对现有的经验的总结和归纳，并不能保证赶上技术不断前进发展的步伐。因此，玻姆提出应把承认不断改进软件工程实践的必要性作为软件工程的第七条原理。根据这条原理，不仅要积极采纳新的软件开发技术，还要注意不断总结经验，收集进度和消耗等数据，进行出错类型和问题报告统计。这些数据既可以用来评估新的 <a href="/wiki/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF" title="软件技术">软件技术</a>的效果，也可以用来指明必须着重注意的问题和应该优先进行研究的工具和技术。
</p>
</div>